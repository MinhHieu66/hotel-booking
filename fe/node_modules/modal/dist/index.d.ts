import { BinaryWriter, BinaryReader } from '@bufbuild/protobuf/wire';

declare class Image {
    readonly imageId: string;
    constructor(imageId: string);
}

/**
 * Wrapper around `ReadableStream` with convenience functions.
 *
 * The Stream API is a modern standard for asynchronous data streams across
 * network and process boundaries. It allows you to read data in chunks, pipe
 * and transform it, and handle backpressure.
 *
 * This wrapper adds some extra functions like `.readText()` to read the entire
 * stream as a string, or `readBytes()` to read binary data.
 *
 * Background: https://developer.mozilla.org/en-US/docs/Web/API/Streams_API
 */
interface ModalReadStream<R = any> extends ReadableStream<R> {
    /** Read the entire stream as a string. */
    readText(): Promise<string>;
    /** Read the entire stream as a byte array. */
    readBytes(): Promise<Uint8Array>;
}
/**
 * Wrapper around `WritableStream` with convenience functions.
 *
 * The Stream API is a modern standard for asynchronous data streams across
 * network and process boundaries. It allows you to read data in chunks, pipe
 * and transform it, and handle backpressure.
 *
 * This wrapper adds some extra functions like `.writeText()` to write a string
 * to the stream, or `writeBytes()` to write binary data.
 *
 * Background: https://developer.mozilla.org/en-US/docs/Web/API/Streams_API
 */
interface ModalWriteStream<R = any> extends WritableStream<R> {
    /** Write a string to the stream. Only if this is a text stream. */
    writeText(text: string): Promise<void>;
    /** Write a byte array to the stream. Only if this is a byte stream. */
    writeBytes(bytes: Uint8Array): Promise<void>;
}

type StdioBehavior = "pipe" | "ignore";
type StreamMode = "text" | "binary";
type ExecOptions = {
    mode?: StreamMode;
    stdout?: StdioBehavior;
    stderr?: StdioBehavior;
};
declare class Sandbox {
    #private;
    readonly sandboxId: string;
    stdin: ModalWriteStream<string>;
    stdout: ModalReadStream<string>;
    stderr: ModalReadStream<string>;
    constructor(sandboxId: string);
    exec(command: string[], options?: ExecOptions & {
        mode?: "text";
    }): Promise<ContainerProcess<string>>;
    exec(command: string[], options: ExecOptions & {
        mode: "binary";
    }): Promise<ContainerProcess<Uint8Array>>;
    terminate(): Promise<void>;
    wait(): Promise<number>;
}
declare class ContainerProcess<R extends string | Uint8Array = any> {
    #private;
    stdin: ModalWriteStream<R>;
    stdout: ModalReadStream<R>;
    stderr: ModalReadStream<R>;
    returncode: number | null;
    constructor(execId: string, options?: ExecOptions);
    /** Wait for process completion and return the exit code. */
    wait(): Promise<number>;
}

type LookupOptions = {
    environment?: string;
    createIfMissing?: boolean;
};
type SandboxCreateOptions = {
    cpu?: number;
    memory?: number;
    timeout?: number;
    command?: string[];
};
declare class App {
    readonly appId: string;
    constructor(appId: string);
    /** Lookup a deployed app by name, or create if it does not exist. */
    static lookup(name: string, options?: LookupOptions): Promise<App>;
    createSandbox(image: Image, options?: SandboxCreateOptions): Promise<Sandbox>;
    imageFromRegistry(tag: string): Promise<Image>;
}

declare enum ParameterType {
    PARAM_TYPE_UNSPECIFIED = 0,
    PARAM_TYPE_STRING = 1,
    PARAM_TYPE_INT = 2,
    /** PARAM_TYPE_PICKLE - currently unused */
    PARAM_TYPE_PICKLE = 3,
    PARAM_TYPE_BYTES = 4,
    /** PARAM_TYPE_UNKNOWN - used in schemas to signify unrecognized or un-annotated types */
    PARAM_TYPE_UNKNOWN = 5,
    PARAM_TYPE_LIST = 6,
    PARAM_TYPE_DICT = 7,
    PARAM_TYPE_NONE = 8,
    PARAM_TYPE_BOOL = 9,
    UNRECOGNIZED = -1
}
/** TODO: rename into NamedPayloadType or similar */
interface ClassParameterSpec {
    name: string;
    /** TODO: deprecate - use full_type instead */
    type: ParameterType;
    hasDefault: boolean;
    /** Default *values* are only registered for class parameters */
    stringDefault?: string | undefined;
    intDefault?: number | undefined;
    pickleDefault?: Uint8Array | undefined;
    bytesDefault?: Uint8Array | undefined;
    boolDefault?: boolean | undefined;
    /** supersedes `type` */
    fullType: GenericPayloadType | undefined;
}
declare const ClassParameterSpec: MessageFns<ClassParameterSpec>;
interface GenericPayloadType {
    baseType: ParameterType;
    /** sub-type for generic types like lists */
    subTypes: GenericPayloadType[];
}
declare const GenericPayloadType: MessageFns<GenericPayloadType>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}

/** Represents a deployed Modal Function, which can be invoked remotely. */
declare class Function_ {
    readonly functionId: string;
    readonly methodName: string | undefined;
    constructor(functionId: string, methodName?: string);
    static lookup(appName: string, name: string, options?: LookupOptions): Promise<Function_>;
    remote(args?: any[], kwargs?: Record<string, any>): Promise<any>;
}

/** Represents a deployed Modal Cls. */
declare class Cls {
    #private;
    constructor(serviceFunctionId: string, schema: ClassParameterSpec[], methodNames: string[]);
    static lookup(appName: string, name: string, options?: LookupOptions): Promise<Cls>;
    /** Create a new instance of the Cls with parameters. */
    instance(params?: Record<string, any>): Promise<ClsInstance>;
}
/** Represents an instance of a deployed Modal Cls, optionally with parameters. */
declare class ClsInstance {
    #private;
    constructor(methods: Map<string, Function_>);
    method(name: string): Function_;
}

/** Function execution exceeds the allowed time limit. */
declare class TimeoutError extends Error {
    constructor(message: string);
}
/** An error on the Modal server, or a Python exception. */
declare class RemoteError extends Error {
    constructor(message: string);
}
/** A retryable internal error from Modal. */
declare class InternalFailure extends Error {
    constructor(message: string);
}
/** Some resource was not found. */
declare class NotFoundError extends Error {
    constructor(message: string);
}

export { App, Cls, ClsInstance, Function_, Image, InternalFailure, type LookupOptions, NotFoundError, RemoteError, Sandbox, type SandboxCreateOptions, type StdioBehavior, type StreamMode, TimeoutError };
